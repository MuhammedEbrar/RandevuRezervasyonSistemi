"""Initial creation of all application tables

Revision ID: df31a5a1f312
Revises: 
Create Date: 2025-07-11 00:06:45.034781

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'df31a5a1f312'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('BUSINESS_OWNER', 'CUSTOMER', name='userrole'), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('profile_picture_url', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('resources',
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('type', sa.Enum('HIZMET', 'MEKAN', name='resourcetype'), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('location', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('images', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('cancellation_policy', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('resource_id')
    )
    op.create_index(op.f('ix_resources_name'), 'resources', ['name'], unique=False)
    op.create_table('availability_schedules',
    sa.Column('schedule_id', sa.UUID(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('day_of_week', sa.Enum('MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY', name='dayofweek'), nullable=True),
    sa.Column('specific_date', sa.Date(), nullable=True),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('type', sa.Enum('REGULAR', 'EXCEPTION', name='scheduletype'), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], ),
    sa.PrimaryKeyConstraint('schedule_id')
    )
    op.create_table('bookings',
    sa.Column('booking_id', sa.UUID(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('total_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('deposit_amount', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED', 'REJECTED', name='bookingstatus'), nullable=False),
    sa.Column('payment_status', sa.Enum('PENDING', 'PAID', 'REFUNDED', 'FAILED', name='paymentstatus'), nullable=False),
    sa.Column('is_recurring', sa.Boolean(), nullable=True),
    sa.Column('parent_booking_id', sa.UUID(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['parent_booking_id'], ['bookings.booking_id'], ),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], ),
    sa.PrimaryKeyConstraint('booking_id')
    )
    op.create_table('pricing_rules',
    sa.Column('price_rule_id', sa.UUID(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('duration_type', sa.Enum('PER_HOUR', 'PER_DAY', 'PER_ITEM', 'FIXED_PRICE', name='durationtype'), nullable=False),
    sa.Column('base_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('min_duration', sa.Integer(), nullable=True),
    sa.Column('max_duration', sa.Integer(), nullable=True),
    sa.Column('applicable_days', postgresql.ARRAY(sa.Enum('MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY', 'ALL', name='applicableday')), nullable=True),
    sa.Column('start_time_of_day', sa.Time(), nullable=True),
    sa.Column('end_time_of_day', sa.Time(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.resource_id'], ),
    sa.PrimaryKeyConstraint('price_rule_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('pricing_rules')
    op.drop_table('bookings')
    op.drop_table('availability_schedules')
    op.drop_index(op.f('ix_resources_name'), table_name='resources')
    op.drop_table('resources')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
